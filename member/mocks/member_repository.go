// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/luantranminh/team-management-app/models"
)

var (
	lockRepositoryMockAssignToProject sync.RWMutex
	lockRepositoryMockCreate          sync.RWMutex
)

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             AssignToProjectFunc: func(ctx context.Context, memberID models.UUID, projectID models.UUID) error {
// 	               panic("TODO: mock out the AssignToProject method")
//             },
//             CreateFunc: func(ctx context.Context, name string, phone string) (*models.Member, error) {
// 	               panic("TODO: mock out the Create method")
//             },
//         }
//
//         // TODO: use mockedRepository in code that requires Repository
//         //       and then make assertions.
//
//     }
type RepositoryMock struct {
	// AssignToProjectFunc mocks the AssignToProject method.
	AssignToProjectFunc func(ctx context.Context, memberID models.UUID, projectID models.UUID) error

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, name string, phone string) (*models.Member, error)

	// calls tracks calls to the methods.
	calls struct {
		// AssignToProject holds details about calls to the AssignToProject method.
		AssignToProject []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID models.UUID
			// ProjectID is the projectID argument value.
			ProjectID models.UUID
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Phone is the phone argument value.
			Phone string
		}
	}
}

// AssignToProject calls AssignToProjectFunc.
func (mock *RepositoryMock) AssignToProject(ctx context.Context, memberID models.UUID, projectID models.UUID) error {
	if mock.AssignToProjectFunc == nil {
		panic("RepositoryMock.AssignToProjectFunc: method is nil but Repository.AssignToProject was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberID  models.UUID
		ProjectID models.UUID
	}{
		Ctx:       ctx,
		MemberID:  memberID,
		ProjectID: projectID,
	}
	lockRepositoryMockAssignToProject.Lock()
	mock.calls.AssignToProject = append(mock.calls.AssignToProject, callInfo)
	lockRepositoryMockAssignToProject.Unlock()
	return mock.AssignToProjectFunc(ctx, memberID, projectID)
}

// AssignToProjectCalls gets all the calls that were made to AssignToProject.
// Check the length with:
//     len(mockedRepository.AssignToProjectCalls())
func (mock *RepositoryMock) AssignToProjectCalls() []struct {
	Ctx       context.Context
	MemberID  models.UUID
	ProjectID models.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberID  models.UUID
		ProjectID models.UUID
	}
	lockRepositoryMockAssignToProject.RLock()
	calls = mock.calls.AssignToProject
	lockRepositoryMockAssignToProject.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, name string, phone string) (*models.Member, error) {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Name  string
		Phone string
	}{
		Ctx:   ctx,
		Name:  name,
		Phone: phone,
	}
	lockRepositoryMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRepositoryMockCreate.Unlock()
	return mock.CreateFunc(ctx, name, phone)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx   context.Context
	Name  string
	Phone string
} {
	var calls []struct {
		Ctx   context.Context
		Name  string
		Phone string
	}
	lockRepositoryMockCreate.RLock()
	calls = mock.calls.Create
	lockRepositoryMockCreate.RUnlock()
	return calls
}
